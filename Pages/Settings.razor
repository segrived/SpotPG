@page "/settings"
@using SpotPG.Services.Abstractions
@using SpotifyAPI.Web
@using System.Web

@inject NavigationManager NavManager
@inject IConfigurationProviderService ConfigurationProvider
@inject ISnackbar Snackbar

<MudCard Class="mb-2">
    <MudGrid Class="p-3">
        <MudItem xs="12" sm="12" md="12">
            <h4 class="text-center">Spotify configuration</h4>
        </MudItem>

        <MudItem xs="12" sm="6" md="6">
            <EnvBasedSettingField @bind-Value="@ConfigurationProvider.Config.SpotifyAccess.ClientId"
                                   Label="Client ID"
                                   Variant="@Variant.Text"
                                   EnvVariableName="SPOTPG_SPOTIFY_CLIENT_ID" />
        </MudItem>

        <MudItem xs="12" sm="6" md="6">
            <EnvBasedSettingField @bind-Value="@ConfigurationProvider.Config.SpotifyAccess.ClientSecret"
                                   Label="Client Secret"
                                   Variant="@Variant.Text"
                                   EnvVariableName="SPOTPG_SPOTIFY_SECRET" />
        </MudItem>

        <MudItem xs="12" sm="6" md="6">
            <MudTextField @bind-Value="@ConfigurationProvider.Config.SpotifyAccess.AccessToken"
                           Label="Access Token"
                           Variant="Variant.Text"
                           Disabled="true"
                           Adornment="Adornment.End"
                           AdornmentIcon="@Icons.Material.Security"/>
        </MudItem>

        <MudItem xs="12" sm="6" md="6">
            <MudTextField @bind-Value="@ConfigurationProvider.Config.SpotifyAccess.RefreshToken"
                           Label="Refresh Token"
                           Variant="Variant.Text"
                           Disabled="true"
                           Adornment="Adornment.End"
                           AdornmentIcon="@Icons.Material.Security"/>
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
            <MudButton OnClick="UpdateTokens" Variant="Variant.Filled" Color="Color.Default">Update token</MudButton>
        </MudItem>
    </MudGrid>
</MudCard>

<MudCard>
    <MudGrid Class="p-3">
        <MudItem xs="12" sm="12" md="12">
            <MudButton OnClick="SaveSettings" Variant="Variant.Filled" Color="Color.Primary">Save settings</MudButton>
        </MudItem>
    </MudGrid>
</MudCard>


@code {

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavManager.Uri);
        string code = HttpUtility.ParseQueryString(uri.Query).Get("code");

        if (code == null)
            return;

        var req = new AuthorizationCodeTokenRequest(
            ConfigurationProvider.Config.SpotifyAccess.ClientId,
            ConfigurationProvider.Config.SpotifyAccess.ClientSecret,
            code,
            GetRedirectUri());

        var response = await new OAuthClient().RequestToken(req);

        ConfigurationProvider.Config.SpotifyAccess.AccessToken = response.AccessToken;
        ConfigurationProvider.Config.SpotifyAccess.RefreshToken = response.RefreshToken;
        ConfigurationProvider.Save();

        NavManager.NavigateTo("/settings");
    }

    private void UpdateTokens()
    {
        if (String.IsNullOrEmpty(ConfigurationProvider.Config.SpotifyAccess.ClientId))
        {
            Snackbar.Add("SpotifyClientId is not specified", Severity.Error);
            return;
        }

        var loginRequest = new LoginRequest(GetRedirectUri(), ConfigurationProvider.Config.SpotifyAccess.ClientId, LoginRequest.ResponseType.Code)
        {
            Scope = new[] { Scopes.UserReadEmail, Scopes.PlaylistModifyPublic, Scopes.PlaylistModifyPrivate, Scopes.PlaylistReadPrivate }
        };

        NavManager.NavigateTo(loginRequest.ToUri().ToString());
    }

    private Uri GetRedirectUri()
    {
        string baseUrl = Environment.GetEnvironmentVariable("SPOTPG_BASE_URL");

        if (baseUrl != null)
            return new Uri($"{baseUrl}/settings");

        var uri = new Uri(NavManager.Uri);
        return new Uri(uri.GetLeftPart(UriPartial.Path));
    }

    private void SaveSettings()
    {
        ConfigurationProvider.Save();
        Snackbar.Add("Configuration was saved", Severity.Success);
    }
}