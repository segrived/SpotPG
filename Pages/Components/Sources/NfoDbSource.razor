@using SpotPG.Services.Abstractions
@using SpotPG.Services
@inject ISceneReleaseNameParserService ParserService

<MudGrid>
    <MudItem xs="12">
        <MudDatePicker DateFormat="yyyy-MM-dd" @bind-Date="@date" DisableToolbar="true" Disabled="inProcess" Label="Release Date" Class="w-100" />
    </MudItem>

    <MudItem xs="12">
        <MudAutocomplete @bind-Value="genre"
                          T="string"
                          Label="Genre"
                          Dense="true"
                          MaxHeight="400"
                          Disabled="inProcess"
                          SearchFunc="@SearchGenre"
                          ResetValueOnEmptyText="true"
                          AdornmentIcon="@Icons.Material.List"
                          Adornment="Adornment.Start"/>
    </MudItem>

    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetReleases">Load releases</MudButton>
    </MudItem>
</MudGrid>

@code {
        private const string ALL_GENRES_ITEM = "All";

    private bool inProcess;

    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    private DateTime? date = DateTime.UtcNow.Date;
    private string genre = "";

    private async Task GetReleases()
    {
        inProcess = true;

        var result = await GetReleaseNamesAsync(date ?? DateTime.UtcNow, String.IsNullOrEmpty(genre) ? null : genre);
        await OnReleaseListLoaded.InvokeAsync(result);

        inProcess = false;
    }

    [Parameter]
    public EventCallback<IEnumerable<ReleaseInfo>> OnReleaseListLoaded { get; set; }

}